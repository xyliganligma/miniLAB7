import numpy as np
import matplotlib.pyplot as plt

def f(x):
    return np.sin(x) * np.exp(-x/5)

def df(x):
    return np.exp(-x/5) * (np.cos(x) - 1/5 * np.sin(x))

def gradient_descent(x0=0, learning_rate=0.1, epochs=100):
    x = x0
    x_history = [x]
    for _ in range(epochs):
        x = x - learning_rate * df(x)
        x_history.append(x)
    return x_history

x_history = gradient_descent(x0=3, learning_rate=0.1, epochs=50)

plt.figure(figsize=(10, 6))
x_vals = np.linspace(-5, 20, 500)
y_vals = f(x_vals)

plt.plot(x_vals, y_vals)
plt.scatter(x_history, [f(x) for x in x_history], color='red')
plt.plot(x_history, [f(x) for x in x_history], 'r--', alpha=0.5)
plt.scatter([x_history[0]], [f(x_history[0])], color='green', s=100)
plt.scatter([x_history[-1]], [f(x_history[-1])], color='blue', s=100)

plt.xlabel('x')
plt.ylabel('f(x)')
plt.title('Градиентный спуск для функции sin(x) * exp(-x/5)')
plt.grid(True)

x_margin = 0.1 * (max(x_vals) - min(x_vals))
y_margin = 0.1 * (max(y_vals) - min(y_vals))
plt.xlim(min(x_vals) - x_margin, max(x_vals) + x_margin)
plt.ylim(min(y_vals) - y_margin, max(y_vals) + y_margin)

plt.show()

print(f"Начальная точка: x = {x_history[0]:.4f}, f(x) = {f(x_history[0]):.4f}")
print(f"Конечная точка: x = {x_history[-1]:.4f}, f(x) = {f(x_history[-1]):.4f}")
